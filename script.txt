using System;
using System.Collections.Generic;
using System.IO;
using System.Security.Cryptography;
using System.Text;
using UnityEngine;
using UnityEngine.UI;
using TMPro;

[Serializable]
public class TaskData
{
    public string giorno;
    public string titolo;
    public string descrizione;
}

[Serializable]
public class TaskList
{
    public List<TaskData> tasks = new List<TaskData>();
}

public class TaskManager : MonoBehaviour
{
    public TMP_InputField titoloInput;
    public TMP_InputField task_input;
    public GameObject taskPrefab;
    public GameObject SettingPanel;
    public GameObject notificaPanel;

    public Transform lunParent, martParent, mercParent, giovParent, venParent, sabParent, domParent;

    public Button btnLun, btnMart, btnMerc, btnGiov, btnVen, btnSab, btnDom;
    public Button btnClearForm, btnSvuotaTask, btnChangeWeek;

    private bool show_setting = true;
    private int slotCorrente = 1;
    private TaskList taskList = new TaskList();

    private string FilePercorso => Path.Combine(Application.persistentDataPath, $"task_week_{slotCorrente}.dat");

    private readonly byte[] chiave = Encoding.UTF8.GetBytes("12345678901234567890123456789012");
    private readonly byte[] iv = Encoding.UTF8.GetBytes("1234567890123456");

    private void Start()
    {
        Debug.Log($"Chiave lunghezza byte: {chiave.Length}");
        Debug.Log($"IV lunghezza byte: {iv.Length}");

        if (chiave.Length != 16 && chiave.Length != 24 && chiave.Length != 32)
            Debug.LogError("Chiave AES non valida: deve essere 16, 24 o 32 byte");
        if (iv.Length != 16)
            Debug.LogError("IV AES deve essere 16 byte");

        btnLun.onClick.AddListener(() => AggiungiTask("Lun"));
        btnMart.onClick.AddListener(() => AggiungiTask("Mart"));
        btnMerc.onClick.AddListener(() => AggiungiTask("Merc"));
        btnGiov.onClick.AddListener(() => AggiungiTask("Giov"));
        btnVen.onClick.AddListener(() => AggiungiTask("Ven"));
        btnSab.onClick.AddListener(() => AggiungiTask("Sab"));
        btnDom.onClick.AddListener(() => AggiungiTask("Dom"));

        btnClearForm.onClick.AddListener(PulisciForm);
        btnSvuotaTask.onClick.AddListener(SvuotaTuttiITask);
        btnChangeWeek.onClick.AddListener(CambiaSettimana);

        CaricaTask();
    }

    public void AggiungiTask(string giorno)
    {
        if (string.IsNullOrWhiteSpace(titoloInput.text)) return;
        if (string.IsNullOrWhiteSpace(task_input.text)) return;

        GameObject nuovoTask = Instantiate(taskPrefab);
        TMP_Text txt = nuovoTask.GetComponentInChildren<TMP_Text>();
        if (txt != null)
            txt.text = $"{titoloInput.text}: \n{task_input.text}";

        Transform targetParent = giorno switch
        {
            "Lun" => lunParent,
            "Mart" => martParent,
            "Merc" => mercParent,
            "Giov" => giovParent,
            "Ven" => venParent,
            "Sab" => sabParent,
            "Dom" => domParent,
            _ => null
        };

        if (targetParent != null)
        {
            nuovoTask.transform.SetParent(targetParent, false);
            taskList.tasks.Add(new TaskData { giorno = giorno, titolo = titoloInput.text, descrizione = task_input.text });
            titoloInput.text = "";
            task_input.text = "";
            MostraNotifica();
            SalvaTask();
        }
        else
        {
            Destroy(nuovoTask);
        }
    }

    public void PulisciForm()
    {
        titoloInput.text = "";
        task_input.text = "";
    }

    public void SvuotaTuttiITask()
    {
        Svuota(lunParent);
        Svuota(martParent);
        Svuota(mercParent);
        Svuota(giovParent);
        Svuota(venParent);
        Svuota(sabParent);
        Svuota(domParent);
        taskList.tasks.Clear();
        SalvaTask();
    }

    private void Svuota(Transform parent)
    {
        foreach (Transform child in parent)
        {
            Destroy(child.gameObject);
        }
    }

    public void MostraNotifica()
    {
        if (notificaPanel != null)
        {
            notificaPanel.SetActive(true);
            Invoke(nameof(NascondiNotifica), 2f);
        }
    }

    private void NascondiNotifica()
    {
        if (notificaPanel != null)
            notificaPanel.SetActive(false);
    }

    public void SettingsPanel()
    {
        show_setting = !show_setting;
        SettingPanel.SetActive(show_setting);
    }

    public void ImpostaFullScreen() => Screen.fullScreen = true;
    public void ImpostaWindowed() => Screen.fullScreen = false;

    public void CambiaSettimana()
    {
        slotCorrente++;
        if (slotCorrente > 5) slotCorrente = 1;
        SvuotaTuttiITask();
        taskList.tasks.Clear();
        CaricaTask();
    }

    private void SalvaTask()
    {
        string json = JsonUtility.ToJson(taskList, true);
        byte[] datiJson = Encoding.UTF8.GetBytes(json);
        byte[] criptati = Cripta(datiJson);
        File.WriteAllBytes(FilePercorso, criptati);
    }

    private void CaricaTask()
    {
        if (!File.Exists(FilePercorso)) return;

        try
        {
            byte[] criptati = File.ReadAllBytes(FilePercorso);
            byte[] datiJson = Decripta(criptati);
            string json = Encoding.UTF8.GetString(datiJson);
            taskList = JsonUtility.FromJson<TaskList>(json);

            foreach (var task in taskList.tasks)
            {
                GameObject nuovoTask = Instantiate(taskPrefab);
                TMP_Text txt = nuovoTask.GetComponentInChildren<TMP_Text>();
                if (txt != null)
                    txt.text = $"{task.titolo}: \n{task.descrizione}";

                Transform targetParent = task.giorno switch
                {
                    "Lun" => lunParent,
                    "Mart" => martParent,
                    "Merc" => mercParent,
                    "Giov" => giovParent,
                    "Ven" => venParent,
                    "Sab" => sabParent,
                    "Dom" => domParent,
                    _ => null
                };

                if (targetParent != null)
                    nuovoTask.transform.SetParent(targetParent, false);
            }
        }
        catch (Exception e)
        {
            Debug.LogWarning("Errore nel caricamento dati: " + e.Message);
        }
    }

    private byte[] Cripta(byte[] dati)
    {
        using Aes aes = Aes.Create();
        aes.Key = chiave;
        aes.IV = iv;

        using MemoryStream ms = new();
        using CryptoStream cs = new(ms, aes.CreateEncryptor(), CryptoStreamMode.Write);
        cs.Write(dati, 0, dati.Length);
        cs.Close();
        return ms.ToArray();
    }

    private byte[] Decripta(byte[] datiCriptati)
    {
        using Aes aes = Aes.Create();
        aes.Key = chiave;
        aes.IV = iv;

        using MemoryStream ms = new(datiCriptati);
        using CryptoStream cs = new(ms, aes.CreateDecryptor(), CryptoStreamMode.Read);
        using MemoryStream output = new();
        cs.CopyTo(output);
        return output.ToArray();
    }
}
-----
using System;
using System.Collections.Generic;
using System.IO;
using System.Security.Cryptography;
using System.Text;
using UnityEngine;
using UnityEngine.UI;
using TMPro;

[Serializable]
public class TaskData
{
    public string giorno;
    public string titolo;
    public string descrizione;
}

[Serializable]
public class TaskList
{
    public List<TaskData> tasks = new List<TaskData>();
}

public class TaskManager : MonoBehaviour
{
    public TMP_InputField titoloInput;
    public TMP_InputField task_input;
    public GameObject taskPrefab;
    public GameObject SettingPanel;
    public GameObject notificaPanel;
    public TMP_Dropdown dropdownWeekSelector;
    public GameObject weekSelectorPanel;

    public Transform lunParent, martParent, mercParent, giovParent, venParent, sabParent, domParent;

    public Button btnLun, btnMart, btnMerc, btnGiov, btnVen, btnSab, btnDom;
    public Button btnClearForm, btnSvuotaTask, btnChangeWeek;

    private int slotCorrente = 1;
    private TaskList taskList = new TaskList();

    private string FilePercorso => Path.Combine(Application.persistentDataPath, $"task_week_{slotCorrente}.dat");

    private readonly byte[] chiave = Encoding.UTF8.GetBytes("12345678901234567890123456789012"); // 32 byte
    private readonly byte[] iv = Encoding.UTF8.GetBytes("InizialVector123"); // 16 byte

    private void Start()
    {
        btnLun.onClick.AddListener(() => AggiungiTask("Lun"));
        btnMart.onClick.AddListener(() => AggiungiTask("Mart"));
        btnMerc.onClick.AddListener(() => AggiungiTask("Merc"));
        btnGiov.onClick.AddListener(() => AggiungiTask("Giov"));
        btnVen.onClick.AddListener(() => AggiungiTask("Ven"));
        btnSab.onClick.AddListener(() => AggiungiTask("Sab"));
        btnDom.onClick.AddListener(() => AggiungiTask("Dom"));

        btnClearForm.onClick.AddListener(PulisciForm);
        btnSvuotaTask.onClick.AddListener(SvuotaTuttiITask);
        btnChangeWeek.onClick.AddListener(MostraWeekSelector);

        dropdownWeekSelector.onValueChanged.AddListener(SelezionaSettimana);

        weekSelectorPanel.SetActive(false);
        CaricaTask();
    }

    public void AggiungiTask(string giorno)
    {
        if (string.IsNullOrWhiteSpace(titoloInput.text)) return;
        if (string.IsNullOrWhiteSpace(task_input.text)) return;

        GameObject nuovoTask = Instantiate(taskPrefab);
        TMP_Text txt = nuovoTask.GetComponentInChildren<TMP_Text>();
        if (txt != null)
            txt.text = $"{titoloInput.text}: \n{task_input.text}";

        Transform targetParent = giorno switch
        {
            "Lun" => lunParent,
            "Mart" => martParent,
            "Merc" => mercParent,
            "Giov" => giovParent,
            "Ven" => venParent,
            "Sab" => sabParent,
            "Dom" => domParent,
            _ => null
        };

        if (targetParent != null)
        {
            nuovoTask.transform.SetParent(targetParent, false);
            taskList.tasks.Add(new TaskData { giorno = giorno, titolo = titoloInput.text, descrizione = task_input.text });
            titoloInput.text = "";
            task_input.text = "";
            MostraNotifica();
            SalvaTask();
        }
        else
        {
            Destroy(nuovoTask);
        }
    }

    public void PulisciForm()
    {
        titoloInput.text = "";
        task_input.text = "";
    }

    public void SvuotaTuttiITask()
    {
        Svuota(lunParent);
        Svuota(martParent);
        Svuota(mercParent);
        Svuota(giovParent);
        Svuota(venParent);
        Svuota(sabParent);
        Svuota(domParent);
        taskList.tasks.Clear();
    }

    private void Svuota(Transform parent)
    {
        foreach (Transform child in parent)
        {
            Destroy(child.gameObject);
        }
    }

    public void MostraNotifica()
    {
        if (notificaPanel != null)
        {
            notificaPanel.SetActive(true);
            Invoke(nameof(NascondiNotifica), 2f);
        }
    }

    private void NascondiNotifica()
    {
        if (notificaPanel != null)
            notificaPanel.SetActive(false);
    }

    public void MostraWeekSelector()
    {
        weekSelectorPanel.SetActive(!weekSelectorPanel.activeSelf);
    }

    public void SelezionaSettimana(int index)
    {
        slotCorrente = index + 1;
        SvuotaTuttiITask();
        CaricaTask();
    }

    public void ImpostaFullScreen() => Screen.fullScreen = true;
    public void ImpostaWindowed() => Screen.fullScreen = false;

    private void SalvaTask()
    {
        try
        {
            string json = JsonUtility.ToJson(taskList, true);
            byte[] datiJson = Encoding.UTF8.GetBytes(json);
            byte[] criptati = Cripta(datiJson);
            File.WriteAllBytes(FilePercorso, criptati);
        }
        catch (Exception e)
        {
            Debug.LogError("Errore salvataggio: " + e.Message);
        }
    }

    private void CaricaTask()
    {
        taskList = new TaskList();
        if (!File.Exists(FilePercorso)) return;

        try
        {
            byte[] criptati = File.ReadAllBytes(FilePercorso);
            byte[] datiJson = Decripta(criptati);
            string json = Encoding.UTF8.GetString(datiJson);
            taskList = JsonUtility.FromJson<TaskList>(json);

            foreach (var task in taskList.tasks)
            {
                GameObject nuovoTask = Instantiate(taskPrefab);
                TMP_Text txt = nuovoTask.GetComponentInChildren<TMP_Text>();
                if (txt != null)
                    txt.text = $"{task.titolo}: \n{task.descrizione}";

                Transform targetParent = task.giorno switch
                {
                    "Lun" => lunParent,
                    "Mart" => martParent,
                    "Merc" => mercParent,
                    "Giov" => giovParent,
                    "Ven" => venParent,
                    "Sab" => sabParent,
                    "Dom" => domParent,
                    _ => null
                };

                if (targetParent != null)
                    nuovoTask.transform.SetParent(targetParent, false);
            }
        }
        catch (Exception e)
        {
            Debug.LogWarning("Errore caricamento: " + e.Message);
        }
    }

    private byte[] Cripta(byte[] dati)
    {
        using Aes aes = Aes.Create();
        aes.Key = chiave;
        aes.IV = iv;

        using MemoryStream ms = new();
        using CryptoStream cs = new(ms, aes.CreateEncryptor(), CryptoStreamMode.Write);
        cs.Write(dati, 0, dati.Length);
        cs.Close();
        return ms.ToArray();
    }

    private byte[] Decripta(byte[] datiCriptati)
    {
        using Aes aes = Aes.Create();
        aes.Key = chiave;
        aes.IV = iv;

        using MemoryStream ms = new(datiCriptati);
        using CryptoStream cs = new(ms, aes.CreateDecryptor(), CryptoStreamMode.Read);
        using MemoryStream output = new();
        cs.CopyTo(output);
        return output.ToArray();
    }
}
